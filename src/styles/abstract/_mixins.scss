// 引入变量
@use "sass:map";
@use '../abstract/variables' as vars;

// 响应式混合宏
@mixin responsive($breakpoint) {
  @if map.has-key(vars.$breakpoints, $breakpoint) {
    @media (max-width: map.get(vars.$breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @if type-of($breakpoint) == number {
      @media (max-width: #{$breakpoint}px) {
        @content;
      }
    } @else {
      @warn "无效的断点: #{$breakpoint}";
    }
  }
}

// Flex布局混合宏
@mixin flex($direction: row, $justify: flex-start, $align: flex-start, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

// 绝对定位居中混合宏
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// 文本截断混合宏
@mixin text-truncate($lines: 1) {
  @if $lines == 1 {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

// 渐变背景混合宏
@mixin gradient-bg($direction: to right, $start-color: var(--primary-color), $end-color: var(--primary-light)) {
  background: linear-gradient($direction, $start-color, $end-color);
}

// 动画混合宏
@mixin transition($property: all, $duration: 0.3s, $timing: ease) {
  transition: $property $duration $timing;
}

// 盒子阴影混合宏
@mixin box-shadow($level: 1) {
  @if $level == 1 {
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  } @else if $level == 2 {
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  } @else if $level == 3 {
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
  } @else if $level == 4 {
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
  }
}
